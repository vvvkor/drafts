.row, .row>*, .container, .stick {box-sizing:border-box;}

/* containers */
/* can not have <html> as container, because modals are centered inside container */
/* do not use .modal and .drawer inside container (position and z-index issues) */
.container {container: block / inline-size;/*position:relative;z-index:20;*/}

/* row */
/* 
  notes:
  1. padding on flex items breaks ratios:
     https://stackoverflow.com/questions/33145242/why-is-padding-expanding-a-flex-item
  2. for valign center ul>li>a must be flex
*/
.row {--flow:row nowrap;--push:auto;display:flex;flex-flow:var(--flow);}
.row.wrap, ul.row:where(:not(.scroll)) {--flow:row wrap;}
  ul:where(.row), ul.row ul, ul.row li {list-style:none;margin:0;padding:0;}
  ul.row li>:not(ul, form){padding:calc(.5 * var(--gap)) var(--gap);text-decoration:none;width:100%;}
  ul.row li>form {padding:calc(.2 * var(--gap));}
.row.vert {--flow:column nowrap;--push:0;}
.row.gap, [class*="grid-"].gap {gap:var(--gap);}
  .row:not(ul).mid {align-items:center;}
  ul.row li {display:flex;}
  ul.row.mid li>:not(ul), ul.row li>:not(ul).mid {display:flex;align-items:center;}
.col-1, .stretch>* {flex:1;}
.col-0 {flex:initial;}
.col-2 {flex:2;}
.col-3 {flex:3;}
.row > .push {margin-right:var(--push);}
.row > .shift {margin-left:var(--push);}
.row > .push + .shift {margin-left:0;}

/* grid */
[class*="grid-"] {--cell-width:16rem;display:grid;grid-template-columns:repeat(auto-fill, minmax(min(100%, var(--cell-width)), 1fr));}
.grid-xs {--cell-width:8rem;}
.grid-s {--cell-width:12rem;}
.grid-l {--cell-width:24rem;}
.span-2 {grid-column-end:span 2;}
.span-3 {grid-column-end:span 3;}
.span-4 {grid-column-end:span 4;}

/* image */
:is(.row, [class*="grid-"])>img, :is(.row, [class*="grid-"])>*>img:only-child {width:100%;height:100%;aspect-ratio:3/2;}

/* stack */
.stack>:first-child {margin-top:0;}
.stack>:last-child {margin-bottom:0;}
.stack.line>:not(:last-child) {border-bottom:var(--bord);}

/* stick */
@media screen {
  .stick {position:sticky;top:0;z-index:35;}
  :where(.stick) {background:var(--back);}
  footer.stick {top:auto;bottom:0;z-index:30;}
  .row:not(.vert) .stick{align-self:start;max-height:100vh;max-height:100dvh;}
}


/* row, dropdown */

ul.row ul {--pos:0 auto auto 100%;}
ul.row:where(:not(.vert))>li>ul {--pos:100% auto auto 0;}
ul.row:where(:not(.vert)) ul.l {--pos:100% 0 auto auto;}
ul.row.vert {width:var(--list-width);}

/*@media (width < 50rem) {*/
@media (max-width: 49.99rem) {
  .row.resp {--flow:column nowrap;--push:0;}
  .row.resp .stick {align-self:stretch;}
  ul.row.resp {width:var(--list-width);}
  ul.row.resp ul {--pos:0 auto auto 100%;}
}
@container block (width < 50rem) {
  .row.resp {--flow:column nowrap;--push:0;}
  .row.resp .stick {align-self:stretch;}
  ul.row.resp {width:var(--list-width);}
  ul.row.resp ul {--pos:0 auto auto 100%;}
}

/*@media (width < 32rem) {*/
@media (max-width: 31.99rem) {
  .row.resp-s {--flow:column nowrap;--push:0;}
  .row.resp-s .stick {align-self:stretch;}
  ul.row.resp-s {width:var(--list-width);}
  ul.row:is(.vert, .resp, .resp-s) ul {--pos:20% auto auto calc(var(--list-width) * .5);}
}
@container block (width < 32rem) {
  .row.resp-s {--flow:column nowrap;--push:0;}
  .row.resp-s .stick {align-self:stretch;}
  ul.row.resp-s {width:var(--list-width);}
  ul.row:is(.vert, .resp, .resp-s) ul {--pos:20% auto auto calc(var(--list-width) * .5);}
}
/**/